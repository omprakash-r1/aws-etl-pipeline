import json
import boto3
from datetime import datetime   
from io import StringIO
import pandas as pd

def album(data):
    album_list=[]
    for row in data['items']:
        album_id=row['track']['album']['id']
        album_name=row['track']['album']['name']
        album_release_date=row['track']['album']['release_date']
        album_total_tracks=row['track']['album']['total_tracks']
        album_external_urls=row['track']['album']['external_urls']['spotify']
        album_element={'id':album_id,'album_name':album_name,'release_date':album_release_date,'total_tracks':album_total_tracks,'url':album_external_urls}
        album_list.append(album_element)
    return album_list

def artist(data):
    artist_list=[]
    for row in data['items']:
        artist_url=row['track']['artists'][0]['external_urls']['spotify']
        artist_href=row['track']['artists'][0]['href']
        artist_id=row['track']['artists'][0]['id']
        artist_name=row['track']['artists'][0]['name']
        artist_uri=row['track']['artists'][0]['uri']
        artist_element={'url':artist_url,'href':artist_href,'id':artist_id,'name':artist_name,'uri':artist_uri}
        artist_list.append(artist_element)
    return artist_list

def song(data):
    song_list=[]
    for row in data['items']:
        song_duration=row['track']['duration_ms']
        song_url=row['track']['external_urls']['spotify']
        song_track_number=row['track']['track_number']
        song_href=row['track']['href']
        song_id=row['track']['id']
        song_name=row['track']['name']
        song_popularity=row['track']['popularity']
        song_element={'url':song_url,'href':song_href,'id':song_id,'song_name':song_name,'duration':song_duration,'track_number':song_track_number,'popularity':song_popularity}
        song_list.append(song_element)
    return song_list

        
def lambda_handler(event, context):
    s3 = boto3.client('s3')
    Bucket="spotify-etl-pipeline-op"
    Key="raw_data/to_processed/"

    spotify_data = []
    spotify_keys = []
    for file in s3.list_objects(Bucket=Bucket, Prefix=Key)['Contents']:
        file_key = file['Key']
        if file_key.split('.')[-1] == "json":
            response = s3.get_object(Bucket = Bucket, Key = file_key)
            content = response['Body']
            jsonObject = json.loads(content.read())
            spotify_data.append(jsonObject)
            spotify_keys.append(file_key)

    for data in spotify_data:
        album_list=album(data)
        artist_list=artist(data)
        song_list=song(data)

        album_df=pd.DataFrame.from_dict(album_list)
        album_df=album_df.drop_duplicates(subset=["id"])
        album_df["release_date"] = album_df["release_date"].apply(lambda x: f"{x}-01-01" if len(x) == 4 else x)
        album_df["release_date"]=pd.to_datetime(album_df["release_date"])


        artist_df=pd.DataFrame.from_dict(artist_list)
        artist_df=artist_df.drop_duplicates(subset=["id"])

        song_df=pd.DataFrame.from_dict(song_list)

        songs_key = "transformed_data/songs_data/songs_transformed_" + str(datetime.now()) + ".csv"
        song_buffer=StringIO()
        song_df.to_csv(song_buffer, index=False)
        song_content = song_buffer.getvalue()
        s3.put_object(Bucket=Bucket, Key=songs_key, Body=song_content)
            
        album_key = "transformed_data/album_data/album_transformed_" + str(datetime.now()) + ".csv"
        album_buffer=StringIO()
        album_df.to_csv(album_buffer, index=False)
        album_content = album_buffer.getvalue()
        s3.put_object(Bucket=Bucket, Key=album_key, Body=album_content)
            
        artist_key = "transformed_data/artist_data/artist_transformed_" + str(datetime.now()) + ".csv"
        artist_buffer=StringIO()
        artist_df.to_csv(artist_buffer, index=False)
        artist_content = artist_buffer.getvalue()
        s3.put_object(Bucket=Bucket, Key=artist_key, Body=artist_content)

    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket': Bucket,
            'Key': key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'raw_data/processed_data/' + key.split("/")[-1])    
        s3_resource.Object(Bucket, key).delete()

